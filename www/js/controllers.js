// Generated by CoffeeScript 1.9.1
(function() {
  var app, chunk, dataURItoBlob,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  chunk = function(arr, size) {
    var i, newArr;
    newArr = [];
    i = 0;
    while (i < arr.length) {
      newArr.push(arr.slice(i, i + size));
      i += size;
    }
    return newArr;
  };

  dataURItoBlob = function(dataURI) {
    var array, binary, i;
    binary = atob(dataURI.split(',')[1]);
    array = [];
    i = 0;
    while (i < binary.length) {
      array.push(binary.charCodeAt(i));
      i++;
    }
    return new Blob([new Uint8Array(array)], {
      type: 'image/jpeg'
    });
  };

  app = angular.module('app');

  app.filter('splitParagraphs', function() {
    return function(text) {
      return text.split('\n');
    };
  });

  app.filter('splitWords', function() {
    return function(text) {
      return text.split(' ');
    };
  });

  app.controller('AppCtrl', [
    "$scope", "$ionicModal", "$rootScope", "$timeout", "$kinvey", "kinveyKey", "kinveySecret", "$http", "askiiKey", "askiiUrl", function($scope, $ionicModal, $rootScope, $timeout, $kinvey, kinveyKey, kinveySecret, $http, askiiKey, askiiUrl) {
      var promise;
      console.log('in app ctrl');
      $scope.loginData = {};
      $scope.signupData = {};
      $ionicModal.fromTemplateUrl("templates/login.html", {
        scope: $scope
      }).then(function(loginmodal) {
        $scope.loginmodal = loginmodal;
      });
      $ionicModal.fromTemplateUrl("templates/signup.html", {
        scope: $scope
      }).then(function(signupmodal) {
        $scope.signupmodal = signupmodal;
      });
      promise = $kinvey.init({
        appKey: kinveyKey,
        appSecret: kinveySecret,
        sync: {
          enable: true
        }
      });
      promise.then(function(kinveyUser) {
        $rootScope.getUserBooks = function() {
          var query;
          $rootScope.books = [];
          query = new $kinvey.Query();
          query.contains("sharedWith", [$rootScope.activeUser._id]);
          promise = $kinvey.DataStore.find("Books", query);
          return promise.then(function(books) {
            return $rootScope.books = books;
          });
        };
        $scope.openLogin = function() {
          $scope.loginmodal.show();
        };
        $scope.closeLogin = function() {
          $scope.loginmodal.hide();
        };
        $scope.closeSignup = function() {
          $scope.signupmodal.hide();
        };
        $scope.openSignup = function() {
          var getAllLanguages;
          $scope.loginmodal.hide();
          getAllLanguages = function() {
            promise = $kinvey.DataStore.find('Languages');
            return promise.then(function(listOfLanguages) {
              $scope.listOfLanguages = listOfLanguages;
              $scope.signupmodal.show();
              return listOfLanguages;
            });
          };
          if ($kinvey.getActiveUser()) {
            return getAllLanguages();
          } else {
            promise = $kinvey.User.login({
              username: "user",
              password: "password"
            });
            return promise.then(function(tempUser) {
              return getAllLanguages();
            });
          }
        };
        $scope.logout = function() {
          return $kinvey.User.logout().then(function() {
            $rootScope.activeUser === null;
            $scope.openLogin();
          });
        };
        $scope.doLogin = function() {
          var logIntoKinvey;
          logIntoKinvey = function() {
            promise = $kinvey.User.login({
              username: $scope.loginData.username.toLowerCase(),
              password: $scope.loginData.password
            });
            return promise.then(function(activeUser) {
              $rootScope.activeUser = activeUser;
              $rootScope.getUserBooks().then(function() {
                return $http.get(askiiUrl + '/users/username/' + $rootScope.activeUser.username + '?key=' + askiiKey).success(function(data, status, headers, config) {
                  var loginEvent;
                  console.log(data);
                  $rootScope.activeUser.askiiUser = data;
                  loginEvent = 'loginEvent';
                  $scope.$broadcast(loginEvent);
                  $scope.closeLogin();
                }).error(function(data, status, headers, config) {});
              });
            });
          };
          if ($kinvey.getActiveUser()) {
            return $kinvey.User.logout().then(function() {
              return logIntoKinvey();
            });
          } else {
            return logIntoKinvey();
          }
        };
        $scope.doSignup = function() {
          var logoutPromise;
          logoutPromise = $kinvey.User.logout();
          return logoutPromise.then(function() {
            var formData, signup_promise;
            formData = {
              username: $scope.signupData.username.toLowerCase(),
              password: $scope.signupData.password,
              email: $scope.signupData.username.toLowerCase(),
              language: $scope.signupData.language._id,
              speed: 1
            };
            signup_promise = $kinvey.User.signup(formData);
            return signup_promise.then(function(activeUser) {
              $rootScope.activeUser = activeUser;
              return $rootScope.getUserBooks().then(function() {
                var data;
                data = {
                  "username": $rootScope.activeUser.email
                };
                return $http.post(askiiUrl + '/users?key=' + askiiKey, data).success(function(data, status, headers, config) {
                  var loginEvent;
                  console.log(data);
                  $rootScope.activeUser.askiiUser = data;
                  loginEvent = 'loginEvent';
                  $scope.$broadcast(loginEvent);
                  $scope.closeSignup();
                }).error(function(data, status, headers, config) {});
              });
            });
          });
        };
        if (kinveyUser) {
          if (kinveyUser.username === "user") {
            $scope.openLogin();
          } else {
            $rootScope.activeUser = kinveyUser;
            return $rootScope.getUserBooks().then(function() {
              var loginEvent;
              loginEvent = 'loginEvent';
              $scope.$broadcast(loginEvent);
            });
          }
        } else {
          $scope.openLogin();
        }
      });
    }
  ]);

  app.controller('ReadCtrl', [
    "$rootScope", "$scope", "$kinvey", "$stateParams", "$location", function($rootScope, $scope, $kinvey, $stateParams, $location) {
      console.log('in read ctrl');
      $scope.redirectToEdit = function(editUrl) {
        return $location.path(editUrl);
      };
      $scope.$on('loginEvent', function() {
        var add_book, books_to_chunk;
        add_book = {
          coverImageUrl: "img/add_book_icon.jpg",
          add_url: "add"
        };
        books_to_chunk = $scope.books;
        books_to_chunk.unshift(add_book);
        $rootScope.libraryLayout = chunk(books_to_chunk, 3);
      });
    }
  ]);

  app.controller('PlayerCtrl', [
    "$kinvey", "$location", "$scope", "$stateParams", "$rootScope", "$ionicSlideBoxDelegate", "$http", "askiiUrl", "askiiKey", function($kinvey, $location, $scope, $stateParams, $rootScope, $ionicSlideBoxDelegate, $http, askiiUrl, askiiKey) {
      var bookPromise, defineUtterance1, defineUtterance2, pageQuery, playUtterance;
      pageQuery = new $kinvey.Query();
      pageQuery.equalTo('bookId', $stateParams.bookId);
      bookPromise = $kinvey.DataStore.get("Books", $stateParams.bookId);
      bookPromise.then(function(book) {
        var promise;
        $scope.book = book;
        promise = $kinvey.DataStore.find("Pages", pageQuery);
        return promise.then(function(pages) {
          var book_display_data;
          book_display_data = {
            image: {
              _downloadURL: book.coverImageUrl
            },
            text: book.title + " by " + book.author
          };
          pages.unshift(book_display_data);
          $scope.pages = pages;
          $ionicSlideBoxDelegate.update();
          promise = $kinvey.DataStore.get('Languages', $rootScope.activeUser.language);
          return promise.then(function(translationLanguage) {
            return $scope.translationLanguage = translationLanguage;
          });
        });
      });
      $scope.currentSlide = 0;
      $scope.playing = false;
      playUtterance = new SpeechSynthesisUtterance;
      defineUtterance1 = new SpeechSynthesisUtterance;
      defineUtterance2 = new SpeechSynthesisUtterance;
      playUtterance.onend = function() {
        $scope.$apply(function() {
          $scope.playing = false;
        });
      };
      playUtterance.onpause = function() {};
      defineUtterance1.onend = function() {
        speechSynthesis.speak(defineUtterance2);
      };
      $scope.slideHasChanged = function(newSlide) {
        $scope.currentSlide = newSlide;
      };
      $scope.slideTo = function(slideNum) {
        speechSynthesis.cancel();
        $scope.playing = false;
        return $ionicSlideBoxDelegate.slide(slideNum);
      };
      $scope.slidePrevious = function() {
        speechSynthesis.cancel();
        $scope.playing = false;
        $ionicSlideBoxDelegate.previous();
      };
      $scope.slideNext = function() {
        speechSynthesis.cancel();
        $scope.playing = false;
        $ionicSlideBoxDelegate.next();
      };
      $scope.speak = function(text, lang) {
        $scope.playing = true;
        if (speechSynthesis.speaking === true) {
          speechSynthesis.resume();
        } else {
          playUtterance.text = text;
          playUtterance.lang = lang;
          playUtterance.localService = true;
          console.log(speechSynthesis);
          console.log(playUtterance);
          speechSynthesis.speak(playUtterance);
        }
      };
      $scope.pause = function() {
        speechSynthesis.cancel();
        $scope.playing = false;
      };
      $scope.endBook = function() {
        speechSynthesis.cancel();
        $scope.playing = false;
      };
      $scope.createReviewQuestion = function(word, index) {
        var answer_text, fill_in_text, hint_text, length_selected_word, new_question, question_text;
        $scope.savedWord = true;
        console.log(word);
        console.log(index);
        length_selected_word = $scope.selected_word.length;
        fill_in_text = Array(length_selected_word).join("_");
        question_text = $scope.pages[index].text.replace($scope.selected_word, fill_in_text);
        answer_text = $scope.selected_word;
        hint_text = $scope.translated_word;
        console.log($rootScope.activeUser.askiiUser);
        new_question = {
          "question": question_text,
          "hint": hint_text,
          "answer": answer_text,
          "book": $scope.book.title,
          "bookImage": $scope.book.coverImageUrl,
          "difficulty": 0,
          "personalized": true,
          "creator": $rootScope.activeUser.askiiUser.user.uri.split("/").slice(-1)[0]
        };
        $http.post(askiiUrl + '/questions?key=' + askiiKey, new_question).success(function(data, status, headers, config) {
          console.log(data);
        }).error(function(data, status, headers, config) {});
      };
      $scope.define = function(word, index) {
        var link, selected_word;
        $scope.savedWord = false;
        $scope.pageIndex = index;
        selected_word = word.trim().replace(/["\.,-\/#!$%\^&\*;:{}=\-_`~()]/g, "");
        link = "https://translation-app.herokuapp.com/api/en/" + $scope.translationLanguage._id + "/" + selected_word;
        $http.get(link).success(function(translated_word, status, headers, config) {
          $scope.selected_word = selected_word;
          $scope.translated_word = translated_word;
          defineUtterance1.text = $scope.selected_word;
          defineUtterance1.lang = "en";
          defineUtterance1.localService = true;
          defineUtterance2.text = $scope.translated_word;
          defineUtterance2.lang = $scope.translationLanguage._id;
          defineUtterance2.localService = true;
          speechSynthesis.speak(defineUtterance1);
        }).error(function(data, status, headers, config) {
          return 'error';
        });
      };
    }
  ]);

  app.controller('SettingsCtrl', [
    "$ionicHistory", "$scope", "$kinvey", "$rootScope", "$ionicPopup", function($ionicHistory, $scope, $kinvey, $rootScope, $ionicPopup) {
      var promise;
      promise = $kinvey.DataStore.find('Languages');
      promise.then(function(listOfLanguages) {
        $scope.listOfLanguages = listOfLanguages;
      });
      $scope.goBack = function() {
        $ionicHistory.goBack();
      };
      $scope.updateUser = function() {
        promise = $kinvey.User.update($rootScope.activeUser);
        return promise.then(function() {
          var alertPopup;
          alertPopup = $ionicPopup.alert({
            title: 'SAVED'
          });
        });
      };
    }
  ]);

  app.controller('EditCtrl', function($scope) {
    $scope.settings = {
      enableFriends: true
    };
  });

  app.controller('ReviewCtrl', [
    "$scope", "$ionicPopup", "askiiUrl", "askiiKey", "$http", function($scope, $ionicPopup, askiiUrl, askiiKey, $http) {
      console.log('in review ctrl');
      $http.get(askiiUrl + '/questions?key=' + askiiKey).success(function(data, status, headers, config) {
        var organizedBooks;
        $scope.vocablist = data.questions;
        organizedBooks = function(allQuestions) {
          var k, len1, organizedByBook, question, ref;
          organizedByBook = {};
          for (k = 0, len1 = allQuestions.length; k < len1; k++) {
            question = allQuestions[k];
            if (question.book) {
              if (ref = question.book, indexOf.call(Object.keys(organizedByBook), ref) < 0) {
                organizedByBook[question.book] = [question];
              } else {
                organizedByBook[question.book].push(question);
              }
            }
          }
          return organizedByBook;
        };
        $scope.organizedByBook = organizedBooks($scope.vocablist);
      }).error(function(data, status, headers, config) {});
      return $scope.showPopup = function(vocab) {
        var alertPopup;
        console.log('in showPopup function' + vocab);
        alertPopup = $ionicPopup.alert({
          title: vocab.english,
          subTitle: vocab.defn,
          template: '(sentence in context)'
        });
      };
    }
  ]);

  app.controller('PracticeCtrl', [
    "$ionicHistory", "$scope", "$kinvey", "$rootScope", "$ionicPopup", "$stateParams", "$location", "askiiUrl", "askiiKey", "$http", function($ionicHistory, $scope, $kinvey, $rootScope, $ionicPopup, $stateParams, $location, askiiUrl, askiiKey, $http) {
      var findAllRepeats, findQuestionIndex, joinAnswers, shuffle;
      findQuestionIndex = function(allQuestions, nextQuestion) {
        var i, len;
        i = 0;
        len = allQuestions.length;
        while (i < len) {
          if (allQuestions[i].uri === nextQuestion.uri) {
            return i;
          }
          i++;
        }
        return null;
      };
      findAllRepeats = function(allQuestions, nextQuestion) {
        var ct, index, k, l, len1, len2, question, toRemove;
        ct = 0;
        toRemove = [];
        for (k = 0, len1 = allQuestions.length; k < len1; k++) {
          question = allQuestions[k];
          if (question.answer === nextQuestion.answer) {
            toRemove.unshift(ct);
          }
          ct += 1;
        }
        for (l = 0, len2 = toRemove.length; l < len2; l++) {
          index = toRemove[l];
          allQuestions.splice(index, 1);
        }
        return allQuestions;
      };
      shuffle = function(a) {
        var i, j, t;
        i = a.length;
        while (--i > 0) {
          j = ~~(Math.random() * (i + 1));
          t = a[j];
          a[j] = a[i];
          a[i] = t;
        }
        return a;
      };
      joinAnswers = function(wrongList, rightAnswer) {
        var k, len1, question;
        if (wrongList.length > 4) {
          wrongList = shuffle(wrongList).splice(0, 4);
        }
        for (k = 0, len1 = wrongList.length; k < len1; k++) {
          question = wrongList[k];
          question["correct"] = false;
        }
        rightAnswer["correct"] = true;
        wrongList.push(rightAnswer);
        shuffle(wrongList);
        return wrongList;
      };
      $scope.goBack = function() {
        $ionicHistory.goBack();
      };
      $scope.questionNum = $stateParams.practiceNum;
      $scope.blockList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
      $http.get(askiiUrl + '/questions?key=' + askiiKey).success(function(data, status, headers, config) {
        var userId;
        $scope.allQuestions = data["questions"];
        userId = $rootScope.activeUser.askiiUser.user.uri.split("/").slice(-1)[0];
        data = {
          "count": $stateParams.practiceNum.toString()
        };
        $http.post(askiiUrl + '/next/' + userId + '?key=' + askiiKey, data).success(function(data, status, headers, config) {
          var fill_in_text, length_selected_word, toRemove;
          $scope.nextQuestion = data;
          length_selected_word = $scope.nextQuestion.answer.length;
          fill_in_text = Array(length_selected_word).join("_");
          $scope.nextQuestion["splitQuestion"] = $scope.nextQuestion.question.split(fill_in_text);
          toRemove = findQuestionIndex($scope.allQuestions, $scope.nextQuestion);
          $scope.allQuestions.splice(toRemove, 1);
          $scope.allQuestions = findAllRepeats($scope.allQuestions, $scope.nextQuestion);
          $scope.possibleAnswers = joinAnswers($scope.allQuestions, $scope.nextQuestion);
        }).error(function(data, status, headers, config) {});
      }).error(function(data, status, headers, config) {});
      return $scope.showResult = function(question) {
        var alertPopup, correctPopup, data, nextPageNum, questionId, userId;
        console.log('in showResult function');
        if (question.correct) {
          userId = $rootScope.activeUser.askiiUser.user.uri.split("/").slice(-1)[0];
          questionId = $scope.nextQuestion.uri.split("/").slice(-1)[0];
          data = {
            "answer": "1"
          };
          $http.post(askiiUrl + '/users/' + userId + '/' + questionId + '?key=' + askiiKey, data).success(function(data, status, headers, config) {
            console.log(data);
          }).error(function(data, status, headers, config) {});
          nextPageNum = parseInt($stateParams.practiceNum);
          nextPageNum += 1;
          if (nextPageNum > 9) {
            return alertPopup = $ionicPopup.alert({
              title: "PRACTICE DONE!",
              template: "Congratulations!"
            });
          } else {
            return correctPopup = $ionicPopup.show({
              title: "Good Job!",
              template: question.answer + ' = ' + question.hint,
              buttons: [
                {
                  text: 'Next',
                  onTap: function() {
                    return $location.path("/practice/" + nextPageNum.toString());
                  }
                }
              ]
            });
          }
        } else {
          return alertPopup = $ionicPopup.alert({
            title: "Try again!",
            template: question.answer + ' = ' + question.hint
          });
        }
      };
    }
  ]);

  app.controller('AddCtrl', [
    "$rootScope", "$scope", "Camera", "uploadContent", "$ionicHistory", "Library", function($rootScope, $scope, Camera, uploadContent, $ionicHistory, Library) {
      var imageStr;
      $scope.book = {};
      imageStr = "";
      $scope.goBack = function() {
        return $rootScope.getUserBooks().then(function() {
          $rootScope.libraryLayout = Library.getShelf($rootScope.books);
          return $ionicHistory.goBack();
        });
      };
      $scope.getPhoto = function() {
        var options;
        options = {
          quality: 50,
          destinationType: navigator.camera.DestinationType.DATA_URL,
          encodingType: navigator.camera.EncodingType.JPEG
        };
        Camera.getPicture(options).then((function(imageStr) {
          $scope.book.image = "data:image/jpeg;base64," + imageStr;
          $scope.book.imageBlob = dataURItoBlob($scope.book.image);
        }), (function(err) {
          console.err(err);
        }));
      };
      return $scope.addBook = function() {
        var imgBlob;
        imgBlob = $scope.book.imageBlob;
        uploadContent.uploadFile({
          "image": imgBlob,
          "size": imgBlob.size
        }).then((function(fileInfo) {
          var data;
          data = {
            title: $scope.book.title,
            author: $scope.book.author,
            coverImageFile: fileInfo,
            sharedWith: [$rootScope.activeUser._id]
          };
          return uploadContent.uploadModel("Books", data).then(function(uploaded_file) {});
        }), (function(err) {
          return console.log(err);
        }));
      };
    }
  ]);

  app.controller('EditBookCtrl', [
    "$ionicHistory", "$scope", "$kinvey", "$rootScope", "$stateParams", "Camera", "uploadContent", "$location", "$state", "Library", function($ionicHistory, $scope, $kinvey, $rootScope, $stateParams, Camera, uploadContent, $location, $state, Library) {
      var bookPromise, pageQuery;
      console.log('in edit book ctrl');
      pageQuery = new $kinvey.Query();
      pageQuery.equalTo('bookId', $stateParams.bookId);
      bookPromise = $kinvey.DataStore.get("Books", $stateParams.bookId);
      bookPromise.then(function(book) {
        var promise;
        $scope.book = book;
        pageQuery = new $kinvey.Query();
        pageQuery.equalTo('bookId', $stateParams.bookId);
        promise = $kinvey.DataStore.find("Pages", pageQuery);
        return promise.then(function(pages) {
          var add_page_data;
          add_page_data = {
            image: {
              _downloadURL: "img/add_book_icon.jpg"
            },
            text: ""
          };
          pages.push(add_page_data);
          $scope.pages = pages;
        });
      });
      $scope.getPhoto = function() {
        var options;
        options = {
          quality: 50,
          destinationType: navigator.camera.DestinationType.DATA_URL,
          encodingType: navigator.camera.EncodingType.JPEG
        };
        Camera.getPicture(options).then((function(imageStr) {
          $scope.book.image = "data:image/jpeg;base64," + imageStr;
          $scope.book.imageBlob = dataURItoBlob($scope.book.image);
        }), (function(err) {
          console.err(err);
        }));
      };
      $scope.goBack = function() {
        return $rootScope.getUserBooks().then(function() {
          $rootScope.libraryLayout = Library.getShelf($rootScope.books);
          return $ionicHistory.goBack();
        });
      };
      $scope.updateBook = function() {
        var imgBlob;
        if ($scope.book.imageBlob) {
          imgBlob = $scope.book.imageBlob;
        }
        delete $scope.book.image;
        delete $scope.book.imageBlob;
        if (imgBlob) {
          uploadContent.uploadFile({
            "image": imgBlob,
            "size": imgBlob.size
          }).then((function(fileInfo) {
            $scope.book.coverImageFile = fileInfo;
            return uploadContent.updateModel("Books", $scope.book).then(function(uploaded_file) {
              $scope.goBack();
            });
          }), (function(err) {
            return console.log(err);
          }));
          return;
        } else {
          uploadContent.updateModel("Books", $scope.book).then(function(uploaded_file) {
            $scope.goBack();
          });
        }
      };
      return $scope.deleteBook = function() {
        uploadContent.deleteModel("Books", $scope.book._id).then(function() {
          $scope.goBack();
        });
      };
    }
  ]);

  app.controller('EditPageCtrl', [
    "$ionicHistory", "$scope", "$kinvey", "$rootScope", "$stateParams", "$ionicSlideBoxDelegate", "uploadContent", "Pages", function($ionicHistory, $scope, $kinvey, $rootScope, $stateParams, $ionicSlideBoxDelegate, uploadContent, Pages) {
      var bookPromise, pageQuery;
      $scope.currentSlide = $stateParams.pageNum;
      pageQuery = new $kinvey.Query();
      pageQuery.equalTo('bookId', $stateParams.bookId);
      bookPromise = $kinvey.DataStore.get("Books", $stateParams.bookId);
      bookPromise.then(function(book) {
        var promise;
        $scope.book = book;
        promise = $kinvey.DataStore.find("Pages", pageQuery);
        return promise.then(function(pages) {
          var add_page_data;
          add_page_data = {
            image: {
              _downloadURL: "img/add_book_icon.jpg"
            },
            text: ""
          };
          pages.push(add_page_data);
          $scope.pages = pages;
          $ionicSlideBoxDelegate.update();
          return $ionicSlideBoxDelegate.slide($stateParams.pageNum);
        });
      });
      $scope.goBack = function() {
        $scope.pages = Pages.getPages($scope.book._id);
        $ionicHistory.goBack();
      };
      $scope.slideHasChanged = function(newSlide) {
        $scope.currentSlide = newSlide;
      };
      $scope.slideTo = function(slideNum) {
        return $ionicSlideBoxDelegate.slide(slideNum);
      };
      $scope.slidePrevious = function() {
        $ionicSlideBoxDelegate.previous();
      };
      $scope.slideNext = function() {
        $ionicSlideBoxDelegate.next();
      };
      $scope.changeImage = function(index) {};
      return $scope.saveChanges = function(index) {
        var newPage, updatedPage, updatedText;
        updatedPage = $scope.pages[index];
        console.log(updatedPage);
        if (index === $scope.pages.length - 1) {
          updatedText = updatedPage.text;
          newPage = {
            "bookId": $scope.book._id,
            "text": updatedText,
            "pageNumber": index
          };
          uploadContent.uploadModel("Pages", newPage).then(function(uploaded_page) {});
        } else {
          uploadContent.updateModel("Pages", updatedPage).then(function(uploaded_page) {});
        }
      };
    }
  ]);

}).call(this);
